Create Database OnlineStore;

Create table Customers(
CUSTOMER_ID INT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    PHONE VARCHAR(20),
    ADDRESS TEXT
);

CREATE TABLE Products (
    PRODUCT_ID INT PRIMARY KEY,
    PRODUCT_NAME VARCHAR(100) NOT NULL,
    CATEGORY VARCHAR(50) NOT NULL,
    PRICE DECIMAL(10,2) NOT NULL,
    STOCK INTEGER NOT NULL
);

CREATE TABLE Orders (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INTEGER REFERENCES Customers(CUSTOMER_ID),
    PRODUCT_ID INTEGER REFERENCES Products(PRODUCT_ID),
    QUANTITY INTEGER NOT NULL,
    ORDER_DATE DATE NOT NULL
);

INSERT INTO Customers (CUSTOMER_ID, NAME, EMAIL, PHONE, ADDRESS) VALUES
(1001, 'John Doe', 'john@email.com', '1234567890', '123 Main St'),
(1234, 'Jane Smith', 'jane@email.com', '0987654321', '456 Oak Ave'),
(1567, 'Bob Johnson', 'bob@email.com', '5555555555', '789 Pine Rd'),
(1789, 'Alice Brown', 'alice@email.com', '1112223333', '321 Elm St'),
(1999, 'Tom Wilson', 'tom@email.com', '4445556666', '654 Maple Ave'),
(2345, 'Sarah Davis', 'sarah@email.com', '7778889999', '987 Cedar St'),
(2789, 'Mike Taylor', 'mike@email.com', '3334445555', '147 Birch Rd');

INSERT INTO Products (PRODUCT_ID, PRODUCT_NAME, CATEGORY, PRICE, STOCK) VALUES
(100001, 'Laptop Pro', 'Electronics', 1299.99, 10),
(100234, 'Smartphone X', 'Appliances', 799.99, 15),
(100567, 'Classic T-shirt', 'Clothing', 29.99, 100),
(100789, 'Designer Jeans', 'Clothing', 89.99, 50),
(101234, 'Coffee Maker Deluxe', 'Appliances', 159.99, 0),
(101567, 'Wireless Headphones', 'Appliances', 199.99, 30),
(101789, 'Evening Dress', 'Clothing', 129.99, 25),
(102345, 'Smart Blender', 'Appliances', 89.99, 5),
(102789, 'Gaming Console', 'Electronics', 499.99, 20),
(103456, 'Running Shoes', 'Footwear', 119.99, 40);

INSERT INTO Orders (ORDER_ID, CUSTOMER_ID, PRODUCT_ID, QUANTITY, ORDER_DATE) VALUES
(10000001, 1001, 100001, 1, '2025-01-15'),
(10000234, 1234, 100234, 2, '2025-01-20'),
(10000567, 1567, 100567, 3, '2025-02-01'),
(10000789, 1001, 100789, 1, '2025-02-05'),
(10001234, 1789, 101234, 2, '2025-02-15'),
(10001567, 1999, 101567, 1, '2025-03-01'),
(10001789, 2789, 101789, 2, '2025-03-10'),
(10002345, 2789, 102345, 1, '2025-03-15'),
(10002789, 1234, 102789, 1, '2025-04-01'),
(10003456, 1567, 102789, 2, '2025-04-05'),
(10003789, 1001, 101567, 1, '2025-04-10'),
(10004123, 1999, 100234, 1, '2025-04-15');

SELECT o.ORDER_ID, p.PRODUCT_NAME, o.QUANTITY, 
       o.ORDER_DATE, (o.QUANTITY * p.PRICE) as TOTAL_AMOUNT
FROM Orders o
JOIN Products p ON o.PRODUCT_ID = p.PRODUCT_ID
WHERE o.CUSTOMER_ID = 1001  
ORDER BY o.ORDER_DATE;

SELECT PRODUCT_ID, PRODUCT_NAME, CATEGORY, PRICE, STOCK
FROM Products
WHERE STOCK = 0;

SELECT 
    p.PRODUCT_ID, 
    p.PRODUCT_NAME,
    p.CATEGORY,
    p.PRICE,
    COALESCE(SUM(o.QUANTITY), 0) as TOTAL_QUANTITY_SOLD,
    COALESCE(SUM(o.QUANTITY * p.PRICE), 0) as TOTAL_REVENUE
FROM 
    Products p
LEFT JOIN 
    Orders o ON p.PRODUCT_ID = o.PRODUCT_ID
GROUP BY 
    p.PRODUCT_ID, p.PRODUCT_NAME, p.CATEGORY, p.PRICE
ORDER BY 
    TOTAL_REVENUE DESC;

SELECT 
    c.CUSTOMER_ID, 
    c.NAME,
    COUNT(DISTINCT o.ORDER_ID) as NUMBER_OF_ORDERS,
    SUM(o.QUANTITY) as TOTAL_ITEMS_BOUGHT,
    SUM(o.QUANTITY * p.PRICE) as TOTAL_PURCHASE_AMOUNT
FROM 
    Customers c
JOIN 
    Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID
JOIN 
    Products p ON o.PRODUCT_ID = p.PRODUCT_ID
GROUP BY 
    c.CUSTOMER_ID, c.NAME
ORDER BY 
    TOTAL_PURCHASE_AMOUNT DESC
LIMIT 5;

SELECT 
    o.CUSTOMER_ID,
    COUNT(DISTINCT p.CATEGORY) as NUMBER_OF_CATEGORIES,
    STRING_AGG(DISTINCT p.CATEGORY, ', ') as CATEGORIES_BOUGHT,
    COUNT(DISTINCT o.ORDER_ID) as TOTAL_ORDERS
FROM 
    Orders o
JOIN 
    Products p ON o.PRODUCT_ID = p.PRODUCT_ID
GROUP BY 
    o.CUSTOMER_ID
HAVING 
    COUNT(DISTINCT p.CATEGORY) >= 2
ORDER BY 
    NUMBER_OF_CATEGORIES DESC, TOTAL_ORDERS DESC;

SELECT 
    DATE_TRUNC('month', o.ORDER_DATE) as MONTH,
    SUM(o.QUANTITY * p.PRICE) as TOTAL_SALES,
    COUNT(DISTINCT o.ORDER_ID) as NUMBER_OF_ORDERS
FROM 
    Orders o
JOIN 
    Products p ON o.PRODUCT_ID = p.PRODUCT_ID
GROUP BY 
    DATE_TRUNC('month', o.ORDER_DATE)
ORDER BY 
    TOTAL_SALES DESC
LIMIT 1;

SELECT 
    p.PRODUCT_ID,
    p.PRODUCT_NAME,
    p.CATEGORY,
    p.PRICE,
    MAX(o.ORDER_DATE) as LAST_ORDER_DATE
FROM 
    Products p
LEFT JOIN 
    Orders o ON p.PRODUCT_ID = o.PRODUCT_ID
GROUP BY 
    p.PRODUCT_ID, p.PRODUCT_NAME, p.CATEGORY, p.PRICE
HAVING 
    MAX(o.ORDER_DATE) < CURRENT_DATE - INTERVAL '6 months'
    OR MAX(o.ORDER_DATE) IS NULL
ORDER BY 
    LAST_ORDER_DATE NULLS FIRST;

SELECT 
    c.CUSTOMER_ID
FROM 
    Customers c
LEFT JOIN 
    Orders o ON c.CUSTOMER_ID = o.CUSTOMER_ID
WHERE 
    o.ORDER_ID IS NULL;

SELECT 
    AVG(o.QUANTITY * p.PRICE) as AVERAGE_ORDER_VALUE
FROM 
    Orders o
JOIN 
    Products p ON o.PRODUCT_ID = p.PRODUCT_ID;